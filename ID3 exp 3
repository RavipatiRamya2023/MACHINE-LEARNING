{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP/tA0PrYG1AcymB1n45F7R"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import math\n","\n","# Sample \"Play Tennis\" dataset\n","data = pd.DataFrame({\n","    'Outlook':    ['Sunny', 'Sunny', 'Overcast', 'Rain', 'Rain', 'Rain', 'Overcast', 'Sunny', 'Sunny', 'Rain', 'Sunny', 'Overcast', 'Overcast', 'Rain'],\n","    'Temperature':['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool', 'Mild', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild'],\n","    'Humidity':   ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'High'],\n","    'Wind':       ['Weak', 'Strong', 'Weak', 'Weak', 'Weak', 'Strong', 'Strong', 'Weak', 'Weak', 'Weak', 'Strong', 'Strong', 'Weak', 'Strong'],\n","    'Play':       ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']\n","})\n","\n","# Calculate entropy of the target column\n","def entropy(column):\n","    values = column.value_counts(normalize=True)\n","    return -sum(p * math.log2(p) for p in values)\n","\n","# Calculate information gain\n","def info_gain(df, attr, target):\n","    total_entropy = entropy(df[target])\n","    vals = df[attr].unique()\n","    weighted_entropy = 0\n","    for val in vals:\n","        subset = df[df[attr] == val]\n","        weighted_entropy += (len(subset)/len(df)) * entropy(subset[target])\n","    return total_entropy - weighted_entropy\n","\n","# ID3 algorithm\n","def id3(df, target, features):\n","    if len(df[target].unique()) == 1:\n","        return df[target].iloc[0]\n","    if not features:\n","        return df[target].mode()[0]\n","\n","    best_feat = max(features, key=lambda f: info_gain(df, f, target))\n","    tree = {best_feat: {}}\n","    for val in df[best_feat].unique():\n","        sub_data = df[df[best_feat] == val]\n","        subtree = id3(sub_data, target, [f for f in features if f != best_feat])\n","        tree[best_feat][val] = subtree\n","    return tree\n","\n","# Build the tree\n","features = list(data.columns[:-1])\n","tree = id3(data, 'Play', features)\n","\n","# Print the decision tree\n","import pprint\n","pprint.pprint(tree)\n","\n","# Classify new sample\n","def classify(sample, tree):\n","    for attr in tree:\n","        value = sample.get(attr)\n","        subtree = tree[attr].get(value)\n","        if isinstance(subtree, dict):\n","            return classify(sample, subtree)\n","        else:\n","            return subtree\n","\n","# Try classifying a new instance\n","new_sample = {'Outlook': 'Sunny', 'Temperature': 'Cool', 'Humidity': 'High', 'Wind': 'Strong'}\n","result = classify(new_sample, tree)\n","print(\"Prediction for new sample:\", result)\n"],"metadata":{"id":"CoM7IixUWCze","executionInfo":{"status":"ok","timestamp":1743745739289,"user_tz":-330,"elapsed":63,"user":{"displayName":"ramya ravipati","userId":"11356452001354288215"}},"outputId":"61ea1086-6895-4ef0-a5de-f0ddd0c982e8","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["{'Outlook': {'Overcast': 'Yes',\n","             'Rain': {'Wind': {'Strong': 'No', 'Weak': 'Yes'}},\n","             'Sunny': {'Humidity': {'High': 'No', 'Normal': 'Yes'}}}}\n","Prediction for new sample: No\n"]}]}]}